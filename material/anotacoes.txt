Introdução.

O Js pode ser utilizado diretamente no Body, com o <script></script>, também pode ser utilizado sendo referenciado por arquivo externo, com o 
<script src="nomedoarquivo.js"></script>, utilizado no head (carregamento do script será realizado antes do carregamento do corpo da página) 
ou diretamente no body, é importante observar o posicionamento do mesmo, caso desejemos alterar um elemento o script js deve estar após este. 
___ ___ ___

O console(control+shift+J) pode ser utilizado no navegador em nossas aplicações para verificarmos erros. 
___ ___ ___

Para exibição na tela temos os seguintes comandos: 

document.getElementById("titulo").innerHTML = "Opa, tudo bem?"; // Altera o conteúdo do titulo para o das aspas.

document.write("Algum Texto"); // Só funciona quando junto do código principal. Inclue a mensagem no corpo do texto.

window.alert("Mensagem de exemplo") // Quem ta mostrando a mensagem é a janela do navegador e não a página. O alert básico

console.log("A mensagem inserida aqui aparecerá no console.") // O mais famoso, aparece apenas no console.

prompt("Digite um número.") // Este foi uma dica dos comentários, seria o mesmo que um input do python, é bem interessante. 
___ ___ ___


Um exemplo simples de condicional, o primeiro True será atendido: 

var hora = 9

if ( hora < 12 ) {
    console.log("Bom dia");
} else if (hora < 18) {
    console.log("Não é de manhã!");
} else if (hora <= 23) {
    console.log("Não é de manhã!");
}

if ( hora >= 12 && hora < 18) { // && = E
    console.log("Boa tarde");
} 

if( hora == 12 || hora == 18 ) { // || = Ou
    console.log("Você está na hora do rush");
}

___ ___ ___

Eventos podem ser utilizados para quando situações ocorrem no site, temos vários métodos para utilizar, um deles é externamente e quando
inserirmos no html colocamos como no exemplo abaixo para cliques em um button(onclick=quando clicar, onmouseover=passar o mouse acima,
onmouseout=tirar o mouse):

Function no script: 

function clicou() {
    alert("Você clicou no botão!");
}

function clicou1() {
    document.getElementById("titulo").innerHTML = "Obrigado por logar ;)"
}

inserindo no Html: 

<button onclick="clicou(), clicou1()">Clique em mim</button>

Podemos usar diretamente no HTML assim também: 

<button onclick="this.innerHTML='Clicou'">Clique em mim</button> // Quando clicar no button a frase "Clique em mim" vira "Clicou".

<h1 id="titulo" onmouseover="console.log('passou o mouse')" onmouseout="console.log('xD')">Seja bem vindo(a)</h1>

Temos eventos de teclado também, com o onkeydown(Enquanto o botao do teclado estiver apertado o evento continua), onkeypress, onkeyup(o evento
só ocorre quando o botao do teclado sobe).~

Para tratar diretamente do evento nós usamos o event, por exemplo na situação abaixo, para verificar quais teclas o usuário digitou:

No script: 

function digitou(e) {
    console.log(e);
}

Html:

<input onkeyup="digitou(event)" id="campo" type="text" name="usuário" value="Nome do usuário" />

Para que o evento acima ocorra apenas quando o usuário apertar o enter:

function digitou(e) {
    if(e.keyCode == 13 == true) {
        let texto = document.getElementById("campo").value;

        console.log(texto);
    }
}

___ ___ ___ 

Temos como realizar as mudanças de estilo com o js também, segue um exemplo abaixo onde construimos buttons com cores diferentes, ao apertar os
mesmos alteram a cor do h1. 


Html: 

    <h1 id="titulo">Seja bem vindo(a)</h1>

    <button onclick="azul()">Azul</button>
    <button onclick="vermelho()">Vermelho</button>
    <button onclick="verde()">Verde</button>

no script(classList puxa todas as classes do elemento selecionado): 

function azul() {
    limpar();
    document.getElementById("titulo").classList.add('azul');
}

function vermelho() {
    limpar();
    document.getElementById("titulo").classList.add('vermelho');
}

function verde() {
    limpar();
    document.getElementById("titulo").classList.add('verde');
}

function limpar() {
    document.getElementById("titulo").classList.remove('vermelho');
    document.getElementById("titulo").classList.remove('azul');
    document.getElementById("titulo").classList.remove('verde');   

Podemos utilizar também para mostrar/ocultar textos, segue abaixo um exemplo realizado com um botão de mostrar telefone:

Html / o this está relacionado com o elemento em parênteses na estrutura script:

    <div id="telefone">999999999</div>

    <button onclick="mostrarTelefone(this)">Mostrar Telefone</button>

css:
    #telefone {
    display: none;
}

Script / o elemento entre parênteses está relacionado com o this na estrutura Html, Caso não queiramos que o botao suma quando clicado no mesmo
basta remover o elemento/this e o elemento.style.display = 'none', na situação atual deste código o botão mostra o número de telefone quando 
clicamos no mesmo e some:

function mostrarTelefone(elemento){
    elemento.style.display = 'none';
    document.getElementById("telefone").style.display = "block";
}

___ ___ ___

Um Array no JavaScript é um objeto com um construtor único, com uma sintaxe literal e com um conjunto adicional de propriedades e de métodos 
herdados de um protótipo de Array. Arrays em JavaScript são usados para armazenar vários valores em uma única variável.

let carros = ['Palio', 'Uno', 'Corolla', 'Ferrari'];

Arrays podem ter mais de um conjunto de itens dentro do mesmo, podem ter funções também(não incluso no exemplo abaixo).

let ingredientes = [
    ['ovo', 'acém', 'Coxa', 'contra filé', 'bisteca'];
    ['arroz', 'feijão', 'farinha', 'macarrão']
]

Para acessar o arroz do exemplo acima no console: 

console.log(ingredientes[1][0]);

___ ___ ___ 

Um objeto é uma coleção de propriedades, e uma propriedade é uma associação entre um nome (ou chave) e um valor. Um valor de propriedade 
pode ser uma função, que é então considerada um método do objeto. Diferente do array é construido com chaves {}. Exemplo abaixo:

let carro = {
    nome:'Fiat',
    modelo:'Uno',
    peso: '800kg',
    ligado: false,
    ligar: function() {
        this.ligado = true;
        console.log("Ligando o "+this.modelo);
        console.log("Carro ligado!")
    },
    acelerar: function() {
        if(this.ligado == true) {
            console.log("Vruuum")
        } else {
            console.log(this.nome+" "+this.modelo+ " não está ligado.")
        }
    }
};


Acessando os elementos acima, as duas primeiras linhas são maneiras para o mesmo objetivo, a segunda é a mais comum: 

console.log(carro['nome']);
console.log(carro.nome);
carro.ligar();
carro.acelerar();

É possível criar objetos dentro do array também, abaixo exemplo e como acessar:

let carrosarray = [ // É possível fazer objetos dentro do array.
    {nome: 'Fiat', modelo: 'Palio'},
    {nome: 'Fiat', modelo: 'Uno'},
    {nome: 'Toyota', modelo: 'Corolla'},
];

console.log(carrosarray[2].nome)  // Toyota / acessando o objeto dentro do array.
___ ___ ___ 

A condicional switch avalia uma expressão, combinando o valor da expressão para um cláusula case, e executa as instruções associadas ao case.

HTML:

    <div id="dia"></div>

Script:
let dia = 3;
let diaNome = '';

switch(dia) {
    case 1:
        diaNome = 'Segunda-feira';
        break;
    case 2:
        diaNome='Terça-Feira';
        break;
    case 3:
        diaNome='Quarta-Feira';
        break;
    case 4:
        diaNome='Quinta-Feira';
        break;
    case 5:
        diaNome='Sexta-Feira';
        break;
    case 6:
        diaNome='Sábado';
        break;
    case 7:
        diaNome='Domingo';
        break;
    default:
        diaNome='Dia desconhecido'; // Default é para valores fora do explicitado.
        break;
}

document.getElementById("dia").innerHTML = "Hoje é: "+diaNome;

Obs: podemos usar a expressão para mais de um case caso estas sejam iguais, exemplo: 

switch(dia) {
    case 6:
    case 7:
        diaNome = 'fim de semana';
        break;

___ ___ ___ 

For, que significa “para” em português, determina que uma ação deve ser executada a partir de uma condição inicial até que seja encontrada
outra que interrompa o laço. O fluxo de repetição é controlado por uma variável, que é testada a cada repetição até que se encontre a condição
de parada.

Html: 

<div id="demo"></div>

Script:

let texto = '';

for(let i = 0; i <= 50; i++) { //criação da variável, condição e incrementação.
    texto = texto + i + '<br/>';
}

document.getElementById("demo").innerHTML = texto;

Para exibir textos array com o for em lista por exemplo.

let carros = ['Ferrari', 'Fusca', 'Palio', 'Corolla']; 

let html = '<ul>';

for(let i in carros) {
    html +='<li>'+ carros[i] +'</li>';
}

html += '</ul>';

document.getElementById("demo").innerHTML = html;

___ ___ ___ 

A declaração while cria um laço que executa uma rotina especifica enquanto a condição de teste for avaliada como verdadeira. A condição 
é avaliada antes da execução da rotina.

Html: 

    <div id="demo"></div>

Script:

let html = '';

let c = 0;

while(c <= 10) {
    html += "Número: "+c+"<br/>";
    c++;
}

document.getElementById("demo").innerHTML = html;

___ ___ ___ 

Com o document.querySelector agora podemos selecionar as classes e IDs facilmente(semelhante ao css).

document.querySelector("ol.lista");

document.querySelector(".lista");

document.querySelector('#IDdoelementoaqui');

document.querySelectorAll('mesmo padrão dos acima')  // o All no caso é para relatar todos os elementos informados.

___ ___ ___ 

DOM - Document object model. / O Modelo de Objeto de Documento (DOM) é uma interface de programação para documentos HTML, XML e SVG . Ele 
fornece uma representação estruturada do documento como uma árvore. O DOM define métodos que permitem acesso à árvore, para que eles possam 
alterar a estrutura, estilo e conteúdo do documento.

Temos como utilizar estes seletores de elementos/documentos com vários tipos de requisições, exemplo abaixo:

document.getElementById('Exemplo').innerHTML = 'Pedro'; // Com ID.
document.getElementsByClassName('lista') // Para classes.
document.getElementsByClassName('lista')[0].innerHTML = 'Item alterado!'; // Para um valor de classe em específico.
document.getElementsByTagName('button') // Para as tags.
document.getElementsByTagName('input') // Para as tags.
document.getElementsByName('text') // Para os campos de inputs e derivados.

___ ___ ___ 

O querySelector retorna o primeiro elemento dentro do documento (usando ordenação em profundidade, pré-ordenada e transversal dos nós do documento) que 
corresponde ao grupo especificado de seletores, alguns exemplos abaixo dos seletores sendo utilizados: 

document.querySelector('#procurarpeloID') // ID
document.querySelector('.lista') // Classes, sempre mostra o primeiro que for achado.
document.querySelectorAll('.lista') // O mesmo do acima, porém mostra todos os achados.
document.querySelector('button') // Procura pela tag.
document.querySelector('button').innerHTML = 'Inscreva-se'; // Alterando o conteúdo dentro do button.

___ ___ ___

Manipulando classes; nesse exemplo abaixo nós fizemos um button que alterna entre duas cores quando clicamos em cima do mesmo.

HTML: 

    <button onclick="trocar()">Botão</button>

CSS: 

.preto {
    background-color: #000;
    color: #FFF;
}
.azul {
    background-color: #00F;
    color: #000;
}

Script(O contains verifica se o valor está presente na classe, é um ótimo identificador para utilizar o if): 

function trocar() {
    if(document.querySelector('button').classList.contains('preto')) {
        document.querySelector('button').classList.remove('preto');
        document.querySelector('button').classList.add('azul');    
    } else {
        document.querySelector('button').classList.remove('azul');
        document.querySelector('button').classList.add('preto');   
    }
}

___ ___ ___ 

Comentários: para blocos = Shift + alt + A, para apenas uma linha Control + ;

___ ___ ___ 

Funções são blocos de construção fundamentais em JavaScript. Uma função é um procedimento de JavaScript - um conjunto de instruções que 
executa uma tarefa ou calcula um valor. Para usar uma função, você deve defini-la em algum lugar no escopo do qual você quiser chamá-la.

___ ___ ___ 

Manipulando atributos de imagem(quando clica em gato troca a imagem de cachorro para outra.):

HTML:

<img src="images/cachorro.jpg" data-animal='Cachorro' class="imagem" /><br/>

<button onclick="trocarImagem('cachorro.jpg', 'Cachorro')">Cachorro</button>
<button onclick="trocarImagem('gato.jpg', 'Gato')">Cachorro</button>

Script:

function trocarImagem(filename, animalname) {
    document.querySelector('.imagem').setAttribute('src', 'images/'+filename);
    document.querySelector('.imagem').setAttribute('data-animal', animalname);
}

___ ___ ___ 

Dimensões, para selecionar e verificar o atributo. No caso de offsetWidth e offsetHeight quase todas as dimensões são inclusas, como bordas,
padding menos margin. o clientHeight e o clientWidth pega apenas o conteúdo efetivo e o padding, ele não considera a barra de rolagem e a borda. 
Caso no resultado de clienteWidth=200 e clientHeight=223 a barra de rolagem teria 23px. o scrollHeight da o tamanho real do conteúdo, o 
scrollWidth também, contando a barra de rolagem do texto. 

document.querySelector('.texto').offsetWidth
document.querySelector('.texto').offsetHeight
document.querySelector('.texto').clientWidth
document.querySelector('.texto').clientHeight
document.querySelector('.texto').scrollWidth
document.querySelector('.texto').scrollHeight

Sobre scroll, caso estejamos tratando do scroll da tela inteira, usamos o window, agora se for um elemento específico devemos selecionar O
mesmo, como segue no exemplo abaixo:

document.querySelector('.texto').scrollTop // para saber a localização do scroll horizontal.
document.querySelector('.texto').scrollLeft // para saber a localização do scroll vertical.
window.scrollY // Para horizontal.
window.scrollX // Para vertical.
document.querySelector('.texto').scrollTo(0, 0); // para manipular, primeiro 0 é o Y, segundo é o X, o scroll será jogado no local.

Adicionando um botao, para que quando clicado leve a página novamente ao topo. 

HTML: 

<div class="buttonToTop" onclick="subirTela()" ></div>

CSS: 

.buttonToTop {
    width: 40px;
    height: 40px;
    border-radius: 15px;
    background-color: #FF0000;
    position: fixed;
    right: 10px;
    bottom: 10px;
    z-index: 999;
    cursor: pointer;
}


SCRIPT: 

function subirTela() {
    window.scrollTo({
        top: 0,
        left: 0,
        behavior: 'smooth'
    });
}

___ ___ ___ 

Métodos de strings:

let nome = 'Maria Silva Santos';

console.log(nome.indexOf('Silva')); // Onde a string inicia. 6.  

console.log(nome.slice(10, 15));  // serve para procurar o valor no local indicado, no caso "a San". pode ser usado negativo também.

console.log(nome.length)  // Tamanho, 18.

console.log(nome.substring(2, 8));  // ria Si

console.log(nome.replace('Silva', 'Rodrigues'));  // Maria Rodrigues Santos, substitui o elemento para vizualização.

// Lembrando que, como o replace acima não foi armazenado na variável principal a mesma continua com o valor anterior.

console.log(nome.toUpperCase());  // MARIA SILVA SANTOS
console.log(nome.toLowerCase());  // maria silva santos
console.log(nome.trim()); // Serve para reduzir os espaços do início e final. muito importante para formulários e acessos de usuários.
console.log(nome.charAt(4)); // Para saber o elemento que está nesta posição informada, no caso "a"
console.log(nome[4]); // O mesmo do acima, porém melhor utilizado.
console.log(nome.split(' '));  // separa a string, gera array. [ 'Maria', 'Silva', 'Santos' ].
// Obs: Caso a string acima estivesse sendo separada com outro simbolo ao invés do espaço, como o ";" ou outro, colocariamos este simbolo.

___ ___ ___ 

Métodos de Numbers

let n = 10.3213910;
let m = '25'

console.log(n.toString);  // Transforma o número em string.

console.log(n.toFixed(2))  // 10.32, muda a quantidade de decimais. 

console.log(parseInt(m))  // Transforma a string em número. temos também o parseFloat().

___ ___ ___ 

Métodos de array.

let lista = ['Ovo', 'Farinha', 'Corante', 'Leite'];

console.log(lista.toString()) // Ovo,Farinha,Corante,Leite
console.log(lista.join(';')) // Transforma o array em string com o valor selecionado. Ovo;Farinha;Corante;Leite
console.log(lista.indexOf('Corante'))  // Posição do item corante, caso não ache retorna -1.
// lista.pop();  // Remove o último item da lista.
// lista.shift();  // Remove o primeiro item da lista.
// console.log(lista) //[ 'Farinha', 'Corante' ]
lista.push('Cacau');  // Adiciona item, [ 'Ovo', 'Farinha', 'Corante', 'Leite', 'Cacau' ].
lista[4] = 'Fermento'; // Mesma função do acima, mas podemos detalhar melhor a posição. [ 'Ovo', 'Farinha', 'Corante', 'Leite', 'Fermento' ]
// delete(lista[1])  // como o nome diz, deleta o valor. [ 'Ovo', <1 empty item>, 'Corante', 'Leite', 'Fermento' ].
lista.splice(1, 1) // A partir do item 1, eliminar apenas um item. [ 'Ovo', 'Corante', 'Leite', 'Fermento' ].
// var exemplo = lista.concat(lista2); para concatenar listas, material apenas de exemplo, não criamos lista2. 
console.log(lista.sort())  // Ordem alfabética. [ 'Corante', 'Fermento', 'Leite', 'Ovo' ].
console.log(lista.reverse()) // Inverte a ordem da lista.

Função mapear(map) passa por todos os elementos e aplica algo: 

let listaNumerica = [45, 4, 9, 16, 25];
let listaNumerica2 = [];

listaNumerica2 = listaNumerica.map(function(item) {
return item * 2;
});

console.log(listaNumerica2);  // [ 90, 8, 18, 32, 50 ]

// Podemos realizar o método acima como for também: 

for(let i in listaNumerica) {
    listaNumerica2.push(listaNumerica[i] * 2)
}

console.log(listaNumerica2);  // [ 90, 8, 18, 32, 50 ]

Podemos usar também o filter, que funciona com método boolean para filtar/criar novas listas.

let listaNumerica = [45, 4, 9, 16, 25];
let listaNumerica2 = [];

listaNumerica2 = listaNumerica.filter(function(item){
    if(item < 20) {
        return true;
    } else {
        return false;
    }
});

console.log(listaNumerica2)  // [ 4, 9, 16 ]

No caso de trocarmos o .filter para every, ele verificará se a condição se aplica em todos os números, se todos eles forem True o retorno é
True, caso contrário False, e no caso de .some ele precisa ter apenas um True para retornar o True.


listaNumerica2 = listaNumerica.find(function(item, index, array) {
    return (item == 16) ? true : false;
});

console.log(listaNumerica2)  // 16

// Temos também o findIndex, que retorna a posição do item.

___ ___ ___ 

Objeto Date, Cria uma instância JavaScript de Date que representa um único momento no tempo. Objetos Date são baseados no valor de tempo 
que é o número de milisegundos desde 1º de Janeiro de 1970 (UTC).

let d = new Date();

// No js os meses começam do 0, 0-janeiro, 1-fevereiro... 
console.log(d);  // Data. Fri Jun 17 2022 13:31:58 GMT-0300 (Horário Padrão de Brasília).
console.log(d.toDateString() );  // Data mais resumida. Fri Jun 17 2022.
console.log(d.toUTCString())  // A data resumida com hora. Fri, 17 Jun 2022 16:31:58 GMT. (europa 3 horas a menos.)
console.log(d.toString()) // Data, igual o primeiro ex.. Fri Jun 17 2022 13:34:32 GMT-0300 (Horário Padrão de Brasília)

let f = new Date(2022, 0, 1, 12, 30, 12);  // Definindo data manualmente, ano, mês, dia, hora, minutos e segundos. 
let h = new Date('2020-01-01 15:42:17');  // Outra maneira de definir, neste caso o 01 é janeiro.
// Tanto o JS quanto o PHP Começam a contar os milisegundos a partir de 1970.

console.log(d.getFullYear()); //pega o ano

console.log(d.getMonth()); //pega o mes (0 a 11)

console.log(d.getDay()); //dia da semana (0 a 6) comeca no domingo

console.log(d.getDate()); //pega o dia atual

console.log(d.getHours()); //pega a hora atual

console.log(d.getMinutes()); //pega os minutos atuais

console.log(d.getSeconds()); //pega os segundos

console.log(d.getMilliseconds()); //pega os milisegundos. 

console.log(d.getTime()); //pega os milisegundos de 1970 até a data sinalizada, time stamp. 

// console.log(date.now()); //pega os milisegundos antigos até a data atual com timestamp.

d.setFullYear(2022);  // para mudar o ano.
d.setMonth(11); // Para mudar o mês.
d.setDate(10); // Para mudar o dia do mês. 
d.setDate(d.getDate()+ 5)  // para saber o dia daqui 5 dias por exemplo.
d.setHours(d.getHours() + 24)  // Para saber a data daqui 24 horas.
let novoValor = d;
console.log( novoValor)

___ ___ ___ 

As funções mais utilizadas de Math. 


console.log(Math.round(3.56));  // 4, arredonda o número para o inteiro mais próximo.
console.log(Math.ceil(3.1));  // 4, sempre arredonda o número para o inteiro maior.
console.log(Math.abs(-3.154515));  // 3.154515, para saber o absoluto do numero. 
console.log(Math.min(5, 3, 10, 42, 2, 6, 24, 50, 12));  //  2, pega o menor número de uma lista/cadeia.
console.log(Math.max(5, 3, 10, 42, 2, 6, 24, 50, 12));  // 50, pega o maior número de uma lista/cadeia.
console.log(Math.random());  // retorna um número aleatório entre 0 e 1.  
let valorRandom = Math.floor(Math.random() * 100);  // Gera números aleatórios até o número 99.

___ ___ ___ 

Intervalos. Realizando a inserção de um timer/relógio que mostra a hora em tempo real no site, com botão de iniciar e parar usando setInterval.

HTML: 

    <button onclick="comecar()">Começar</button>
    <button onclick="parar()">Parar</button>
    <div class="demo"></div>


Script:

let timer;

function comecar() {
    timer = setInterval(showTime, 1000);  // A função sem os parênteses, e o tempo em seguida, em milisegundos, 1000 = 1 segundo.
}
function parar() {
    clearInterval(timer);
}


function showTime() {
    let d = new Date();
    let h = d.getHours();
    let m = d.getMinutes();
    let s = d.getSeconds();
    let txt = h +':'+ m + ':' + s;

    document.querySelector('.demo').innerHTML = txt;

}

Temos também o setTimeout, que é para funções onde você preferencialmente só quer rodar uma vez, determinando o tempo a mesma.

let timer;

// setTimeout(function() {
//     alert("Rodou :D");

// }, 2000);


function rodar() {
    timer = setTimeout(function() {
        document.querySelector('.demo').innerHTML = 'Rodou!';
    }, 2000);
}

function parar() {
    clearTimeout(timer);  // Para parar a ação antes dela ser finalizada.
}

___ ___ ___ 

Template strings. Para facilitar a utilização das variáveis em strings e substituir a concatenação.

let nome = 'João';
let idade = 60;

let frase = `Meu nome é ${nome} e eu tenho ${idade} anos e ano que vem farei ${++idade}.`;

___ ___ ___ 

Destructuring. 

let pessoa = { 
    nome: 'João',
    sobrenome: 'Silvano',
    social: {
        facebook: 'Joaozin',
        instagram: {
            url: '@Jao',
            seguidores: 2000
        },
    },
    nomeCompleto: function() {
        return `${this.nome} ${this.sobrenome}`
    }
};

// Da maneira antiga. 
let nome = pessoa.nome;
let idade = pessoa.idade;
let sobrenome = pessoa.sobrenome;
let instagram = pessoa.social.instagram;

// Com destructuring, exemplos:

let {nome:renomeandoVariavelNome, sobrenome, idade = 18, social:{facebook}, social:{instagram:{url:instagram}}} = pessoa // Para renomear o elemento no destructuring basta nomeVariável:novoNome.
// No caso de não existir a variável no objeto nós podemos fazer como o exemplo acima de idade. 

console.log(renomeandoVariavelNome, idade, sobrenome, facebook, instagram)  // João 18 Silvano Joaozin @Jao

// O método acima de outra maneira:

let { facebook, instagram } = pessoa.social;
console.log(facebook, instagram)  //Joaozin Jão

// Com função. 

function pegarNomeCompleto(nome, sobrenome) {
    return `${nome} ${sobrenome}`;
}

console.log(pegarNomeCompleto(pessoa.nome, pessoa.sobrenome))  // João Silvano

// Com array. 

let info = ['Mario Ferreira', 'João', 'Alcantara', '@Mariojoao'];

let [ nomeCompleto, nome, sobrenome, instagram] = info;

console.log(nomeCompleto, nome, sobrenome, instagram)  // Mario Ferreira João Alcantara @Mariojoao

// let info = ['nomeCompleto, , , instagram] = info; // Para pegar apenas o primeiro e último item, exemplo. 

___ ___ ___ 

Arrow function

// let somar = (x, y) => {
//     return x + y
// }

let somar = (x, y) => x + y;  // return implícito pois está sem as chaves.

// let letrasNoNome = (nome) => {
//     return nome.length;
// }

// let letrasNoNome = (nome) => nome.length;

let letrasNoNome = nome => nome.length; // Quando temos apenas um parâ. podemos coloca-lo diretamente.

console.log(somar(10, 5))
console.log(letrasNoNome('Vinicius'))

___ ___ ___ 

Operador Spread(...):

let numeros = [1,2,3,4];
let outros = [...numeros, 5, 6, 7, 8];

console.log(outros)  

/* [  resultado da operação acima com spread
    1, 2, 3, 4,
    5, 6, 7, 8
  ] */

// Mais um exemplo. 

let info = {
    nome: 'Larissa',
    sobrenome: 'Lacerta',
    idade: 40,
};

let novaInfo = {
    ...info,
    cidade:"Campina Grande",
    Estado:"Paraiba",
    País:"Brasil",
}

console.log(novaInfo)

// Resultado da operação acima com o ...spread.

/* {
    nome: 'Larissa',
    sobrenome: 'Lacerta',
    idade: 40,
    cidade: 'Campina Grande',
    Estado: 'Paraiba',
    'País': 'Brasil'
  } */

___ ___ ___


