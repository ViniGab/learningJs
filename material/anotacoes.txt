Introdução.

O Js pode ser utilizado diretamente no Body, com o <script></script>, também pode ser utilizado sendo referenciado por arquivo externo, com o 
<script src="nomedoarquivo.js"></script>, utilizado no head (carregamento do script será realizado antes do carregamento do corpo da página) 
ou diretamente no body, é importante observar o posicionamento do mesmo, caso desejemos alterar um elemento o script js deve estar após este. 
___ ___ ___

O console(control+shift+J) pode ser utilizado no navegador em nossas aplicações para verificarmos erros. 
___ ___ ___

Para exibição na tela temos os seguintes comandos: 

document.getElementById("titulo").innerHTML = "Opa, tudo bem?"; // Altera o conteúdo do titulo para o das aspas.

document.write("Algum Texto"); // Só funciona quando junto do código principal. Inclue a mensagem no corpo do texto.

window.alert("Mensagem de exemplo") // Quem ta mostrando a mensagem é a janela do navegador e não a página. O alert básico

console.log("A mensagem inserida aqui aparecerá no console.") // O mais famoso, aparece apenas no console.

prompt("Digite um número.") // Este foi uma dica dos comentários, seria o mesmo que um input do python, é bem interessante. 
___ ___ ___


Um exemplo simples de condicional, o primeiro True será atendido: 

var hora = 9

if ( hora < 12 ) {
    console.log("Bom dia");
} else if (hora < 18) {
    console.log("Não é de manhã!");
} else if (hora <= 23) {
    console.log("Não é de manhã!");
}

if ( hora >= 12 && hora < 18) { // && = E
    console.log("Boa tarde");
} 

if( hora == 12 || hora == 18 ) { // || = Ou
    console.log("Você está na hora do rush");
}

___ ___ ___

Eventos podem ser utilizados para quando situações ocorrem no site, temos vários métodos para utilizar, um deles é externamente e quando
inserirmos no html colocamos como no exemplo abaixo para cliques em um button(onclick=quando clicar, onmouseover=passar o mouse acima,
onmouseout=tirar o mouse):

Function no script: 

function clicou() {
    alert("Você clicou no botão!");
}

function clicou1() {
    document.getElementById("titulo").innerHTML = "Obrigado por logar ;)"
}

inserindo no Html: 

<button onclick="clicou(), clicou1()">Clique em mim</button>

Podemos usar diretamente no HTML assim também: 

<button onclick="this.innerHTML='Clicou'">Clique em mim</button> // Quando clicar no button a frase "Clique em mim" vira "Clicou".

<h1 id="titulo" onmouseover="console.log('passou o mouse')" onmouseout="console.log('xD')">Seja bem vindo(a)</h1>

Temos eventos de teclado também, com o onkeydown(Enquanto o botao do teclado estiver apertado o evento continua), onkeypress, onkeyup(o evento
só ocorre quando o botao do teclado sobe).~

Para tratar diretamente do evento nós usamos o event, por exemplo na situação abaixo, para verificar quais teclas o usuário digitou:

No script: 

function digitou(e) {
    console.log(e);
}

Html:

<input onkeyup="digitou(event)" id="campo" type="text" name="usuário" value="Nome do usuário" />

Para que o evento acima ocorra apenas quando o usuário apertar o enter:

function digitou(e) {
    if(e.keyCode == 13 == true) {
        let texto = document.getElementById("campo").value;

        console.log(texto);
    }
}

___ ___ ___ 

Temos como realizar as mudanças de estilo com o js também, segue um exemplo abaixo onde construimos buttons com cores diferentes, ao apertar os
mesmos alteram a cor do h1. 


Html: 

    <h1 id="titulo">Seja bem vindo(a)</h1>

    <button onclick="azul()">Azul</button>
    <button onclick="vermelho()">Vermelho</button>
    <button onclick="verde()">Verde</button>

no script(classList puxa todas as classes do elemento selecionado): 

function azul() {
    limpar();
    document.getElementById("titulo").classList.add('azul');
}

function vermelho() {
    limpar();
    document.getElementById("titulo").classList.add('vermelho');
}

function verde() {
    limpar();
    document.getElementById("titulo").classList.add('verde');
}

function limpar() {
    document.getElementById("titulo").classList.remove('vermelho');
    document.getElementById("titulo").classList.remove('azul');
    document.getElementById("titulo").classList.remove('verde');   

Podemos utilizar também para mostrar/ocultar textos, segue abaixo um exemplo realizado com um botão de mostrar telefone:

Html / o this está relacionado com o elemento em parênteses na estrutura script:

    <div id="telefone">999999999</div>

    <button onclick="mostrarTelefone(this)">Mostrar Telefone</button>

css:
    #telefone {
    display: none;
}

Script / o elemento entre parênteses está relacionado com o this na estrutura Html, Caso não queiramos que o botao suma quando clicado no mesmo
basta remover o elemento/this e o elemento.style.display = 'none', na situação atual deste código o botão mostra o número de telefone quando 
clicamos no mesmo e some:

function mostrarTelefone(elemento){
    elemento.style.display = 'none';
    document.getElementById("telefone").style.display = "block";
}

___ ___ ___

Um Array no JavaScript é um objeto com um construtor único, com uma sintaxe literal e com um conjunto adicional de propriedades e de métodos 
herdados de um protótipo de Array. Arrays em JavaScript são usados para armazenar vários valores em uma única variável.

let carros = ['Palio', 'Uno', 'Corolla', 'Ferrari'];

Arrays podem ter mais de um conjunto de itens dentro do mesmo, podem ter funções também(não incluso no exemplo abaixo).

let ingredientes = [
    ['ovo', 'acém', 'Coxa', 'contra filé', 'bisteca'];
    ['arroz', 'feijão', 'farinha', 'macarrão']
]

Para acessar o arroz do exemplo acima no console: 

console.log(ingredientes[1][0]);

___ ___ ___ 

Um objeto é uma coleção de propriedades, e uma propriedade é uma associação entre um nome (ou chave) e um valor. Um valor de propriedade 
pode ser uma função, que é então considerada um método do objeto. Diferente do array é construido com chaves {}. Exemplo abaixo:

let carro = {
    nome:'Fiat',
    modelo:'Uno',
    peso: '800kg',
    ligado: false,
    ligar: function() {
        this.ligado = true;
        console.log("Ligando o "+this.modelo);
        console.log("Carro ligado!")
    },
    acelerar: function() {
        if(this.ligado == true) {
            console.log("Vruuum")
        } else {
            console.log(this.nome+" "+this.modelo+ " não está ligado.")
        }
    }
};


Acessando os elementos acima, as duas primeiras linhas são maneiras para o mesmo objetivo, a segunda é a mais comum: 

console.log(carro['nome']);
console.log(carro.nome);
carro.ligar();
carro.acelerar();

É possível criar objetos dentro do array também, abaixo exemplo e como acessar:

let carrosarray = [ // É possível fazer objetos dentro do array.
    {nome: 'Fiat', modelo: 'Palio'},
    {nome: 'Fiat', modelo: 'Uno'},
    {nome: 'Toyota', modelo: 'Corolla'},
];

console.log(carrosarray[2].nome)  // Toyota / acessando o objeto dentro do array.
___ ___ ___ 

A condicional switch avalia uma expressão, combinando o valor da expressão para um cláusula case, e executa as instruções associadas ao case.

HTML:

    <div id="dia"></div>

Script:
let dia = 3;
let diaNome = '';

switch(dia) {
    case 1:
        diaNome = 'Segunda-feira';
        break;
    case 2:
        diaNome='Terça-Feira';
        break;
    case 3:
        diaNome='Quarta-Feira';
        break;
    case 4:
        diaNome='Quinta-Feira';
        break;
    case 5:
        diaNome='Sexta-Feira';
        break;
    case 6:
        diaNome='Sábado';
        break;
    case 7:
        diaNome='Domingo';
        break;
    default:
        diaNome='Dia desconhecido'; // Default é para valores fora do explicitado.
        break;
}

document.getElementById("dia").innerHTML = "Hoje é: "+diaNome;

Obs: podemos usar a expressão para mais de um case caso estas sejam iguais, exemplo: 

switch(dia) {
    case 6:
    case 7:
        diaNome = 'fim de semana';
        break;

